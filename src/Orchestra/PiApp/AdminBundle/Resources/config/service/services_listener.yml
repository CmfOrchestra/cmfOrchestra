parameters:
    piapp.admin.listener.login.class: PiApp\AdminBundle\EventListener\LoginListener
    piapp.admin.listener.logout.class: PiApp\AdminBundle\EventListener\LogoutListener
    
    piapp.admin.listener.postload.class: PiApp\AdminBundle\EventListener\PostLoadListener
    piapp.admin.listener.loadclassmetadata.class: PiApp\AdminBundle\EventListener\loadClassMetadataListener
    piapp.admin.listener.onflush.class: PiApp\AdminBundle\EventListener\OnFlushListener
    piapp.admin.listener.preremove.class: PiApp\AdminBundle\EventListener\PreRemoveListener
    piapp.admin.listener.postremove.class: PiApp\AdminBundle\EventListener\PostRemoveListener
    piapp.admin.listener.prepersist.class: PiApp\AdminBundle\EventListener\PrePersistListener
    piapp.admin.listener.postpersist.class: PiApp\AdminBundle\EventListener\PostPersistListener
    piapp.admin.listener.preupdate.class: PiApp\AdminBundle\EventListener\PreUpdateListener
    piapp.admin.listener.postupdate.class: PiApp\AdminBundle\EventListener\PostUpdateListener
    piapp.admin.listener.schema.class: PiApp\AdminBundle\EventListener\SchemaListener
    piapp.admin.listener.layout.class: PiApp\AdminBundle\EventListener\LayoutListener

services:
    pi_app_admin.layout_listener:
        class: %piapp.admin.listener.layout.class%
        arguments: [@router, @security.context, @event_dispatcher, @doctrine, @service_container]
        tags:
            - { name: kernel.event_listener, event: kernel.controller, method: onKernelController, priority: 65 }
            
    pi_app_admin.user.login_listener:
        class: %piapp.admin.listener.login.class%
        arguments: [@router, @security.context, @event_dispatcher, @doctrine, @service_container]
        tags:
            - { name: kernel.event_listener, event: security.interactive_login }
            
    pi_app_admin.logout_listener:
        class: %piapp.admin.listener.logout.class%
        arguments: [@router, @service_container]
        tags:
            - { name: kernel.event_listener, event: kernel.response }    
            
    pi_app_admin.postload_listener:
        class: %piapp.admin.listener.postload.class%
        arguments: [@service_container]
        tags:
            - { name: doctrine.event_listener, event: postLoad, connexion: default }

#    pi_app_admin.loadclassmetadata_listener:
#        class: %piapp.admin.listener.loadclassmetadata.class%
#        arguments: [@service_container]
#        tags:
#            - { name: doctrine.event_listener, event: loadClassMetadata, connexion: default }

#    pi_app_admin.onflush_listener:
#        class: %piapp.admin.listener.onflush.class%
#        arguments: [@service_container]
#        tags:
#            - { name: doctrine.event_listener, event: onFlush, connexion: default }

    pi_app_admin.preremove_listener:
        class: %piapp.admin.listener.preremove.class%
        arguments: [@service_container]
        tags:
            - { name: doctrine.event_listener, event: preRemove, connexion: default }

    pi_app_admin.postremove_listener:
        class: %piapp.admin.listener.postremove.class%
        arguments: [@service_container]
        tags:
            - { name: doctrine.event_listener, event: postRemove, connexion: default }

    pi_app_admin.schema_listener:
        class: %piapp.admin.listener.schema.class%
        arguments: [@service_container]
        tags:
            - { name: doctrine.event_listener, event: postGenerateSchema, connexion: default }

    pi_app_admin.prepersist_listener:
        class: %piapp.admin.listener.prepersist.class%
        arguments: [@service_container]
        tags:
            - { name: doctrine.event_listener, event: prePersist, connexion: default }   
            
    pi_app_admin.postpersist_listener:
        class: %piapp.admin.listener.postpersist.class%
        arguments: [@service_container]
        tags:
            - { name: doctrine.event_listener, event: postPersist, connexion: default }

    pi_app_admin.preupdate_listener:
        class: %piapp.admin.listener.preupdate.class%
        arguments: [@service_container]
        tags:
            - { name: doctrine.event_listener, event: preUpdate, connexion: default } 

    pi_app_admin.postupdate_listener:
        class: %piapp.admin.listener.postupdate.class%
        arguments: [@service_container]
        tags:
            - { name: doctrine.event_listener, event: postUpdate, connexion: default }