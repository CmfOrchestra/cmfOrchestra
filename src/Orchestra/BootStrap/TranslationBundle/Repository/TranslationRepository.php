<?php
/**
 * This file is part of the <Translation> project.
 *
 * @category   BootStrap_Repositories
 * @package    Repository
 * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
 * @since 2012-03-09
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace BootStrap\TranslationBundle\Repository;

use Gedmo\Translatable\TranslatableListener;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Gedmo\Tool\Wrapper\EntityWrapper;
use Gedmo\Translatable\Mapping\Event\Adapter\ORM as TranslatableAdapterORM;
use Doctrine\DBAL\Types\Type;

use BootStrap\TranslationBundle\Builder\RepositoryBuilderInterface;

/**
 * Translation Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @category   BootStrap_Repositories
 * @package    Repository
 *
 * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
 */
class TranslationRepository extends EntityRepository implements RepositoryBuilderInterface
{
		
    /**
     * Current TranslatableListener instance used
     * in EntityManager
     *
     * @var \Gedmo\Translatable\TranslatableListener
     */
    private $listener;
    
    /**
     * Value of the  associated translation class.
     * 
     * @var string
     */
    private $_entityTranslationName = "";    
    
    /**
     * @var \Symfony\Component\DependencyInjection\ContainerInterface
     */
    protected $_container;    

    /**
     * {@inheritdoc}
     */
    public function __construct(EntityManager $em, ClassMetadata $class)
    {
       	parent::__construct($em, $class);
       	
       	if(isset($this->getClassMetadata()->associationMappings['translations']) && !empty($this->getClassMetadata()->associationMappings['translations']))
       		$this->_entityTranslationName = $this->getClassMetadata()->associationMappings['translations']['targetEntity'];
    }
    
	/**
	 * Gets the container instance.
	 *
	 * @return \Symfony\Component\DependencyInjection\ContainerInterface
	 * @access protected  
	 *
	 * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
	 */
	protected function getContainer()
	{
		return $this->_container;
	}	
  
	/**
	 * Gets the container instance.
	 *
	 * @return \Symfony\Component\DependencyInjection\ContainerInterface
	 * @access public
	 *
	 * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
	 */
	public function setContainer($container)
	{
		$this->_container = $container;
	}	  

    /**
     * @return string
     */
    public function getClassName()
    {
    	return $this->getEntityName();
    }    

    /**
     * Count all fields existed from the given entity 
     *
     * @param boolean	$enabled	[0, 1]	
     * @return string				the count of all fields.
     * @access	public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function count($enabled = null){
    	if(!is_null($enabled))
    		return $this->_em->createQuery("SELECT COUNT(c) FROM {$this->_entityName} c WHERE c.enabled = '{$enabled}'")->getSingleScalarResult();
    	else
    		return $this->_em->createQuery("SELECT COUNT(c) FROM {$this->_entityName} c")->getSingleScalarResult();
    }    
    
    /**
     * add where for user roles 
     *
     * @param \Doctrine\ORM\QueryBuilder $query
     * @return \Doctrine\ORM\QueryBuilder
     * @access	public
     *
     * @author Riad Hellal <r.hellal@novediagroup.com>
     */    
    public function checkRoles(\Doctrine\ORM\QueryBuilder $query){
      
       if($this->_container instanceof \Symfony\Component\DependencyInjection\ContainerInterface){
        if(isset($GLOBALS['ENTITIES']['RESTRICTION_BY_ROLES']) && in_array($this->_class->name, $GLOBALS['ENTITIES']['RESTRICTION_BY_ROLES']) ){
          // Gets all user roles.
          $user_roles	= $this->_container->get('bootstrap.Role.factory')->getAllUserRoles();          
          foreach($user_roles as $key => $role){
            $query->orWhere($query->expr()->like('a.heritage', $query->expr()->literal('%'.$role.'%')));
          }
        }
      }
      
      return $query;
    }
    
    /**
     * Loads all translations with all translatable
     * fields from the given entity
     *
     * @param string $locale
     * @param \Doctrine\ORM\Query $query
     * @param string $result = {'array', 'object'}
     * @param bool	$INNER_JOIN
     * @return array/object of result query
     * @access	public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function findTranslationsByQuery($locale, Query $query, $result = "array", $INNER_JOIN = false)
    {
    	if (!$query) {
    		throw new NotFoundHttpException(sprintf(
    				'Failed to find Tree by id:[%s]',
    				$id
    		));
    	}

    	$query = $this->setTranslatableHints($query, $locale, $INNER_JOIN);
    
    	if($result == 'array')
    		$entities = $query->getArrayResult();
    	elseif($result == 'object')
    		$entities = $query->getResult();
    	else
    		throw new \InvalidArgumentException("We haven't set the good option value : array or object !");
    
    	$query->free();
    
    	return $entities;
    }    

    /**
     * Loads all translations with all translatable
     * fields from the given entity
     * 
     * @link https://github.com/l3pp4rd/DoctrineExtensions/blob/master/doc/translatable.md#entity-domain-object
     *
     * @param object $entity Must implement Translatable
     * @return \Doctrine\ORM\Query
     * @param string $locale
     * @param bool	$INNER_JOIN	     
     * @access	public
     * 
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function setTranslatableHints(Query $query, $locale, $INNER_JOIN = false)
    {
    	$query->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\Translatable\Query\TreeWalker\TranslationWalker');
    	
    	if($INNER_JOIN){
    		$query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_INNER_JOIN, true);
    	}
    	
    	$query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $locale);
    	$query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_FALLBACK, true);
    	
    	return $query;
    }    
        
    /**
     * Find all translations by an entity.
     *
     * @param string $locale
     * @param string $result = {'array', 'object'}	array by default
     * @param bool	$INNER_JOIN	
     * @param int	 $MaxResults
     * @return array\object
     * @access	public
     * 
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */    
    public function findAllByEntity($locale, $result = "array", $INNER_JOIN = false, $MaxResults = null)
    {
    	$qb = $this->_em->createQueryBuilder()
    	->select('a')
    	->from($this->_entityName, 'a');
      
      	$query = $this->checkRoles($qb)->getQuery();
      
    	if(!is_null($MaxResults))
    		$query->setMaxResults($MaxResults);
    	return $this->findTranslationsByQuery($locale, $query, $result, $INNER_JOIN);    	
    }

    /**
     * Find a translation of an entity by its id
     *
     * @param string $locale
     * @param int	$id
     * @param string $result = {'array', 'object'}
     * @param bool	$INNER_JOIN	
     * @return object
     * @access	public
     * 
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */    
    public function findOneByEntity($locale, $id, $result = "array", $INNER_JOIN = false)
    {
        //$query	= $this->_em->createQuery("SELECT p FROM {$this->_entityName} p  WHERE p.id = :id");
        
    	$qb = $this->_em->createQueryBuilder()
    	->select('a')
    	->from($this->_entityName, 'a')
        ->where('a.id = :id');
      
        $query = $this->checkRoles($qb)->getQuery();
      
        $query->setParameter('id', $id);
        $query->setMaxResults(1);
        
        return current($this->findTranslationsByQuery($locale, $query, $result, $INNER_JOIN));
    }

    /**
     * Find a translation of an entity by its id and return the query
     *
     * @param string $locale
     * @param int	$id
     * @param string $result = {'array', 'object'}
     * @param bool	$INNER_JOIN
     * @return object
     * @access	public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function findOneQueryByEntity($id)
    {
    	$query = $this->createQueryBuilder('a')
    	->select('a')
    	->where('a.id = :ID')
   		->setParameters(array(
    			'ID'	=> $id,
    	));
    	//return $query->getQuery()->setMaxResults(1)->getArrayResult();
    	
    	return $query;
    }    

    /**
     * Loads all translations with all translatable
     * fields from the given entity
     *
     * @param object $entity Must implement Translatable
     * @return array list of translations in locale groups
     * @access	public
     * 
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function findTranslations($entity)
    {
    	$result = array();
    	$wrapped = new EntityWrapper($entity, $this->_em);
    	if ($wrapped->hasValidIdentifier()) {
    		$entityId = $wrapped->getIdentifier();
    		$entityClass = $wrapped->getMetadata()->name;
    
    		$translationMeta = $this->getClassMetadata(); // table inheritance support
    		$qb = $this->_em->createQueryBuilder();
    		$qb->select('trans.content, trans.field, trans.locale')
    		->from($translationMeta->rootEntityName, 'trans')
    		->where('trans.object_id = :entityId')
    		->orderBy('trans.locale');
    		$q = $qb->getQuery();
    		$data = $q->execute(
    				compact('entityId', 'entityId'),
    				Query::HYDRATE_ARRAY
    		);
    
    		if ($data && is_array($data) && count($data)) {
    			foreach ($data as $row) {
    				$result[$row['locale']][$row['field']] = $row['content'];
    			}
    		}
    	}
    	return $result;
    }
    
    /**
     * Loads all translations with all translatable
     * fields by a given entity primary key
     *
     * @param mixed $id - primary key value of an entity
     * @return array
     * @access	public
     * 
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function findTranslationsByObjectId($id)
    {
    	$result = array();
    	if ($id) {
    		$translationMeta = $this->getClassMetadata(); // table inheritance support
    		$qb = $this->_em->createQueryBuilder();
    		$qb->select('trans.content, trans.field, trans.locale')
    		->from($translationMeta->rootEntityName, 'trans')
    		->where('trans.object_id = :entityId')
    		->orderBy('trans.locale');
    		$q = $qb->getQuery();
    		$data = $q->execute(
    				array('entityId' => $id),
    				Query::HYDRATE_ARRAY
    		);
    
    		if ($data && is_array($data) && count($data)) {
    			foreach ($data as $row) {
    				$result[$row['locale']][$row['field']] = $row['content'];
    			}
    		}
    	}
    	return $result;
    }    
        
    /**
     * Makes additional translation of $entity $field into $locale
     * using $value
     *
     * @param object $entity
     * @param string $field
     * @param string $locale
     * @param mixed $value
     * @return TranslationRepository
     * @access	public
     * 
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function translate($entity, $field, $locale, $value)
    {
        $meta = $this->_em->getClassMetadata(get_class($entity));
        $listener = new \Gedmo\Translatable\TranslatableListener; //$this->getTranslatableListener();
        $config = $listener->getConfiguration($this->_em, $meta->name);
        if (!isset($config['fields']) || !in_array($field, $config['fields'])) {
            throw new \Gedmo\Exception\InvalidArgumentException("Entity: {$meta->name} does not translate field - {$field}");
        }
        if (in_array($locale, array($listener->getDefaultLocale(), $listener->getTranslatableLocale($entity, $meta)))) {
            $meta->getReflectionProperty($field)->setValue($entity, $value);
            $this->_em->persist($entity);
        } else {
            $ea = new TranslatableAdapterORM();
            $foreignKey = $meta->getReflectionProperty($meta->getSingleIdentifierFieldName())->getValue($entity);
            $objectClass = $meta->name;
            $class = $listener->getTranslationClass($ea, $meta->name);
            $transMeta = $this->_em->getClassMetadata($class);
            $trans = $this->findOneBy(compact('locale', 'field', 'object_id'));
            if (!$trans) {
                $trans = new $class();
                $transMeta->getReflectionProperty('object_id')->setValue($trans, $entity->getId());
                $transMeta->getReflectionProperty('field')->setValue($trans, $field);
                $transMeta->getReflectionProperty('locale')->setValue($trans, $locale);
            }
            $type = Type::getType($meta->getTypeOfField($field));
            $transformed = $type->convertToDatabaseValue($value, $this->_em->getConnection()->getDatabasePlatform());
            $transMeta->getReflectionProperty('content')->setValue($trans, $transformed);
            if ($this->_em->getUnitOfWork()->isInIdentityMap($entity)) {
                $this->_em->persist($trans);
            } else {
                $oid = spl_object_hash($entity);
                $listener->addPendingTranslationInsert($oid, $trans);
            }
        }
        return $this;

//     	$meta 		= $this->_em->getClassMetadata(get_class($entity));
//     	$listener 	= $this->getTranslatableListener();
//     	$config 	= $listener->getConfiguration($this->_em, $meta->name);
    	
//         if (!isset($config['fields']) || !in_array($field, $config['fields'])) {
//             throw new \Gedmo\Exception\InvalidArgumentException("Entity: {$meta->name} does not translate field - {$field}");
// 		}

// 		$ea 		= new TranslatableAdapterORM();
// 		$class 		= $listener->getTranslationClass($ea, $meta->name);
		
// 		$trans 		= $this->findOneBy(compact('locale', 'field', 'object_id'));
// 		if (!$trans) {
// 			$entity->setTranslatableLocale('fr');
// 			$entity->addTranslation(new $class($locale, $field, $value));
// 		}
    
//     	$this->_em->persist($entity);
//     	$this->_em->flush();
    }

    /**
     * Find the entity $class by the translated field.
     * Result is the first occurence of translated field.
     * Query can be slow, since there are no indexes on such
     * columns
     *
     * @param string $field
     * @param string $value
     * @param string $class
     * @return object - instance of $class or null if not found
     * @access	public
     * 
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function findObjectByTranslatedField($field, $value, $class)
    {
//         $entity = null;
//         $meta = $this->_em->getClassMetadata($class);
//         $translationMeta = $this->getClassMetadata(); // table inheritance support
//         if ($meta->hasField($field)) {
//             $dql = "SELECT trans.foreignKey FROM {$translationMeta->rootEntityName} trans";
//             $dql .= ' WHERE trans.objectClass = :class';
//             $dql .= ' AND trans.field = :field';
//             $dql .= ' AND trans.content = :value';
//             $q = $this->_em->createQuery($dql);
//             $q->setParameters(compact('class', 'field', 'value'));
//             $q->setMaxResults(1);
//             $result = $q->getArrayResult();
//             $id = count($result) ? $result[0]['foreignKey'] : null;

//             if ($id) {
//                 $entity = $this->_em->find($class, $id);
//             }
//         }
//         return $entity;
    }
    
    /**
     * Gets all categories of entity.
     *
     * @return array
     * @access public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since 2012-03-15
     */
    public function getArrayAllCategory()
    {
    	$query = $this->createQueryBuilder('a')
    	->select('a.category')
    	->where('a.enabled = :enabled')
    	->setParameters(array(
    			'enabled'	=> 1,
    	));
    	//return $query->getQuery()->setMaxResults(1)->getArrayResult();
    
    	$result = array();
    	$data	= $query->getQuery()->getArrayResult();
    	if ($data && is_array($data) && count($data)) {
    		foreach ($data as $row) {
    			if(!empty($row['category']))
    				$result[ $row['category'] ] = $row['category'];
    		}
    	}
    	return $result;
    }
    
    /**
     * Gets all entities by one category.
     *
     * @return array\entity
     * @access public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since 2012-03-15
     */
    public function getAllByCategory($category = '', $MaxResults = null, $ORDER_PublishDate = '', $ORDER_Position = '', $enabled = true)
    {
    	$query = $this->createQueryBuilder('a')->select('a');    	
    	
    	if(!empty($ORDER_PublishDate) && !empty($ORDER_Position)){
    		$query
    			->orderBy('a.published_at', $ORDER_PublishDate)
    			->addOrderBy('a.position', $ORDER_Position);
    	}elseif(!empty($ORDER_PublishDate) && empty($ORDER_Position)){
    		$query
    			->orderBy('a.published_at', $ORDER_PublishDate);
    	}elseif(empty($ORDER_PublishDate) && !empty($ORDER_Position)){
    		$query
    			->orderBy('a.position', $ORDER_Position);
    	}    	
    
    	if($enabled && !empty($category)){
    		$query
    		->where('a.enabled = :enabled')
    		->Andwhere('a.category = :cat')
    		->setParameters(array(
    				'cat'		=> $category,
    				'enabled'	=> 1,
    		));
    	}elseif($enabled && empty($category)){
    		$query
    		->where('a.enabled = :enabled')
    		->setParameters(array(
    				'enabled'	=> 1,
    		));
    	}elseif(!$enabled && !empty($category)){
	    	$query
	    	->where('a.category = :cat')
	    	->setParameters(array(
	    			'cat'		=> $category,
	    	));   	
    	}
    
    	if(!is_null($MaxResults))
    		$query->setMaxResults($MaxResults);
    
    	$query = $this->checkRoles($query);    	
    	return $query;
    }
    

    /**
     * Gets all order by param.
     *
     * @return int
     * @access public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since 2012-10-05
     */
    public function getAllOrderByField($field = 'createat', $ORDER = "DESC", $enabled = null)
    {
    	$query = $this->createQueryBuilder('a')
    	->select("a");
    	
    	if( !is_null($enabled) ) {
    		$query
    		->where('a.enabled = :enabled')
    		->setParameters(array(
    				'enabled'	=> $enabled,
    		));
   		}
    	$query->orderBy("a.{$field}", $ORDER);
    	
    	$query = $this->checkRoles($query);    	
    	return $query;
    }
        
    /**
     * Gets all between first and last position.
     *
     * @return int
     * @access public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since 2012-10-04
     */
    public function getAllBetweenPosition($FirstPosition = null, $LastPosition = null, $enabled = null)
    {
    	$query = $this->createQueryBuilder('a')
    	->select("a");    	
    	
    	if(!is_null($FirstPosition) && !is_null($LastPosition))
    		$query
    		->where("a.position BETWEEN '{$FirstPosition}' AND '{$LastPosition}'");
    	elseif(!is_null($FirstPosition) && is_null($LastPosition))
    		$query
    		->where("a.position >= {$FirstPosition} ");
    	elseif(is_null($FirstPosition) && !is_null($LastPosition))
    		$query
    		->where("a.position <= {$LastPosition} ");
    	
    	if( !is_null($enabled) ) {
    		$query
    		->Andwhere('a.enabled = :enabled')
    		->setParameters(array(
    				'enabled'	=> $enabled,
    		));
    	}    	

    	$query->orderBy("a.position", 'ASC');
    	
    	$query = $this->checkRoles($query);    
    	return $query;
    }
    
    /**
     * Gets max/min value of a column.
     *
     * @return int
     * @access public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since 2012-10-04
     */
    public function getMaxOrMinValueOfColumn($field, $type = 'MAX', $enabled = null)
    {
    	$query = $this->createQueryBuilder('a')->select("a.{$field}");
    
    	if($type == "MAX")
    		$query->orderBy("a.{$field}", 'DESC');
    	elseif($type == "MIN")
    		$query->orderBy("a.{$field}", 'ASC');
    
    	if( !is_null($enabled) ) {
    		$query
    		->where('a.enabled = :enabled')
    		->setParameters(array(
    				'enabled'	=> $enabled,
    		));
    	}    
    
    	$query->setMaxResults(1);
    	
    	$query = $this->checkRoles($query);    
    	return $query;
    }  

    /**
     * Find all entities of the entity by category
     *
     * @param string $locale
     * @param string $category
     * @param string $result = {'array', 'object'}
     * @param bool	$INNER_JOIN
     * @return object
     * @access	public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function getAllEnabled($locale, $result = "object", $INNER_JOIN = false, $MaxResults = null)
    {
    	$query = $this->_em->createQueryBuilder()
    	->select('a')
    	->from($this->_entityName, 'a')
    	->where('a.enabled = :enabled')
    	->setParameter('enabled', 1)
        ->setMaxResults($MaxResults);
    
    	$query = $this->checkRoles($query)->getQuery();
    	
    	return $this->findTranslationsByQuery($locale, $query, $result, $INNER_JOIN);
    }    

    /**
     * Find all entities of the entity by category
     *
     * @param string $locale
     * @param string $category
     * @param string $result = {'array', 'object'}
     * @param bool	$INNER_JOIN
     * @return object
     * @access	public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function getAllEnableByCat($locale, $category, $result = "object", $INNER_JOIN = false)
    {
    	$query = $this->_em->createQueryBuilder()
    	->select('a')
    	->from($this->_entityName, 'a')
    	->where("a.enabled = 1");
    	
    	if(!empty($category)){
    		$query
    		->Andwhere('a.category = :cat')
    		->setParameters(array(
    				'cat' => $category,
    		));
    	}
    
    	$query = $this->checkRoles($query)->getQuery();
    	
    	return $this->findTranslationsByQuery($locale, $query, $result, $INNER_JOIN);
    }    

    /**
     * Find all entities of the entity by category
     *
     * @param string $locale
     * @param string $category
     * @param string $result = {'array', 'object'}
     * @param bool	$INNER_JOIN
     * @return object
     * @access	public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function getAllEnableByCatAndByPosition($locale, $category, $result = "object", $INNER_JOIN = false)
    {
    	$query = $this->_em->createQueryBuilder()
    	->select('a')
    	->from($this->_entityName, 'a')
    	->orderBy('a.position', 'ASC')
    	->where("a.enabled = 1");
    	
    	if(!empty($category)){
    		$query
    		->Andwhere('a.category = :cat')
    		->setParameters(array(
    				'cat' => $category,
    		));
    	}
    	
    	$query = $this->checkRoles($query)->getQuery();
    
    	return $this->findTranslationsByQuery($locale, $query, $result, $INNER_JOIN);
    } 

    /**
     * Find a translation field of an entity by its id
     *
     * @param string $locale
     * @param int	$id
     * @param string $result = {'array', 'object'}
     * @param bool	$INNER_JOIN
     * @return object
     * @access	public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function getContentByField($locale, array $fields, $INNER_JOIN = false)
    {
 		$query	= $this->_em->createQuery("SELECT p FROM {$this->_entityTranslationName} p  WHERE p.locale = :locale and p.field = :field and p.content = :content ");
 		$query->setParameter('locale', $locale);
 		$query->setParameter('field', array_keys($fields['content_search']));
 		$query->setParameter('content', array_values($fields['content_search']));
 		$query->setMaxResults(1);
		$entities = $query->getResult();
   				
		if(!is_null($entities)){
 			$entity = current($entities); 			
 			if(is_object($entity)){
	   			$id	    = $entity->getObject()->getId();
	   			
	   			$query	= $this->_em->createQuery("SELECT p FROM {$this->_entityTranslationName} p  WHERE p.locale = :locale and p.field = :field and p.object = :objectId");
	   			$query->setParameter('locale', $locale);
	   			$query->setParameter('objectId', $id);
	   			$query->setParameter('field', $fields['field_result']);
	   			$query->setMaxResults(1);    			
	   			$entities = $query->getResult();
	   			
	   			if(!is_null($entities) && (count($entities)>=1) ){
	   				return current($entities);
	  			}else
	 				return null;
 			}else 
 				return null;
		}else
			return null;
 				
    	// 		$dql = <<<___SQL
    	//   SELECT a
    	//   FROM {$this->_entityName} a
    	//   WHERE a.slug = '{$slug}'
    	// ___SQL;
    
    	// 		$query  = $this->_em->createQuery($dql);
    	// 		$result = $this->findTranslationsByQuery($locale, $query, $result, $INNER_JOIN);
    
    
    	// 		print_r(count($result));exit;
    		
    	// 		return current($result);
    }    
    
    /**
     * Find a translation of an entity by its id
     *
     * @param string $locale
     * @param int	$id
     * @param string $result = {'array', 'object'}
     * @param bool	$INNER_JOIN
     * @return object
     * @access	public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function getEntityByField($locale, array $fields, $result = "object", $INNER_JOIN = false)
    {
    	$query	= $this->_em->createQuery("SELECT p FROM {$this->_entityTranslationName} p  WHERE p.locale = :locale and p.field = :field and p.content = :content ");
    	$query->setParameter('locale', $locale);
    	$query->setParameter('field', array_keys($fields['content_search']));
    	$query->setParameter('content', array_values($fields['content_search']));
    	$query->setMaxResults(1);
    	$entities = $query->getResult();
    		
    	if(!is_null($entities)){
    		$entity = current($entities);
    		
    		if(is_object($entity)){
    			$id	    = $entity->getObject()->getId();
	    		return $this->findOneByEntity($locale, $id, $result, $INNER_JOIN);
    		}else
    			return null;
    	}else
    		return null;
    }   

}