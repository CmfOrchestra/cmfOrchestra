<?php
/**
 * This file is part of the <User> project.
 *
 * @category   BootStrap_Repositories
 * @package    Repository
 * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
 * @since 2012-01-02
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace BootStrap\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * User Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 * 
 * @category   BootStrap_Repositories
 * @package    Repository
 *
 * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
 */
class UserRepository extends EntityRepository
{
	/**
	 * Gets all entities by one category.
	 *
	 * @return array\entity
	 * @access public
	 *
	 * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
	 * @since 2012-03-15
	 */
	public function getAllByCategory($category = '', $MaxResults = null, $ORDER_PublishDate = '', $ORDER_Position = '', $enabled = true)
	{
		$query = $this->createQueryBuilder('a')->select('a');
		 
		if(!empty($ORDER_PublishDate) && !empty($ORDER_Position)){
			$query
			->orderBy('a.created_at', $ORDER_PublishDate)
			->addOrderBy('a.position', $ORDER_Position);
		}elseif(!empty($ORDER_PublishDate) && empty($ORDER_Position)){
			$query
			->orderBy('a.created_at', $ORDER_PublishDate);
		}elseif(empty($ORDER_PublishDate) && !empty($ORDER_Position)){
			$query
			->orderBy('a.position', $ORDER_Position);
		}
	
		if($enabled && !empty($category)){
			$query
			->where('a.enabled = :enabled')
			->Andwhere('a.category = :cat')
			->setParameters(array(
					'cat'		=> $category,
					'enabled'	=> 1,
			));
		}elseif($enabled && empty($category)){
			$query
			->where('a.enabled = :enabled')
			->setParameters(array(
					'enabled'	=> 1,
			));
		}elseif(!$enabled && !empty($category)){
			$query
			->where('a.category = :cat')
			->setParameters(array(
					'cat'		=> $category,
			));
		}
	
		if(!is_null($MaxResults))
			$query->setMaxResults($MaxResults);
	
		return $query;
	}	
}