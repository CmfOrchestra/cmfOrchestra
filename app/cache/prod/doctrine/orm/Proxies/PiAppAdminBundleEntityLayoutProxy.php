<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class PiAppAdminBundleEntityLayoutProxy extends \PiApp\AdminBundle\Entity\Layout implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setPages(\Doctrine\Common\Collections\ArrayCollection $pages)
    {
        $this->__load();
        return parent::setPages($pages);
    }

    public function addPage(\PiApp\AdminBundle\Entity\Page $page)
    {
        $this->__load();
        return parent::addPage($page);
    }

    public function removePage(\PiApp\AdminBundle\Entity\Page $page)
    {
        $this->__load();
        return parent::removePage($page);
    }

    public function getPages()
    {
        $this->__load();
        return parent::getPages();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setFilePc($filePc)
    {
        $this->__load();
        return parent::setFilePc($filePc);
    }

    public function getFilePc()
    {
        $this->__load();
        return parent::getFilePc();
    }

    public function setFileMobile($fileMobile)
    {
        $this->__load();
        return parent::setFileMobile($fileMobile);
    }

    public function getFileMobile()
    {
        $this->__load();
        return parent::getFileMobile();
    }

    public function setConfigXml($configXml)
    {
        $this->__load();
        return parent::setConfigXml($configXml);
    }

    public function getConfigXml()
    {
        $this->__load();
        return parent::getConfigXml();
    }

    public function setCreatedAt($createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setUpdatedAt($updatedAt)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }

    public function setArchiveAt($archiveAt)
    {
        $this->__load();
        return parent::setArchiveAt($archiveAt);
    }

    public function getArchiveAt()
    {
        $this->__load();
        return parent::getArchiveAt();
    }

    public function setEnabled($enabled)
    {
        $this->__load();
        return parent::setEnabled($enabled);
    }

    public function getEnabled()
    {
        $this->__load();
        return parent::getEnabled();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'pages', 'name', 'filePc', 'fileMobile', 'configXml', 'created_at', 'updated_at', 'archive_at', 'enabled');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}