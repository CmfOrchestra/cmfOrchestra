<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class BootStrapMediaBundleEntityMediaProxy extends \BootStrap\MediaBundle\Entity\Media implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function prePersist()
    {
        $this->__load();
        return parent::prePersist();
    }

    public function preUpdate()
    {
        $this->__load();
        return parent::preUpdate();
    }

    public function setBinaryContent($binaryContent)
    {
        $this->__load();
        return parent::setBinaryContent($binaryContent);
    }

    public function getBinaryContent()
    {
        $this->__load();
        return parent::getBinaryContent();
    }

    public function getMetadataValue($name, $default = NULL)
    {
        $this->__load();
        return parent::getMetadataValue($name, $default);
    }

    public function setMetadataValue($name, $value)
    {
        $this->__load();
        return parent::setMetadataValue($name, $value);
    }

    public function unsetMetadataValue($name)
    {
        $this->__load();
        return parent::unsetMetadataValue($name);
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setEnabled($enabled)
    {
        $this->__load();
        return parent::setEnabled($enabled);
    }

    public function getEnabled()
    {
        $this->__load();
        return parent::getEnabled();
    }

    public function setProviderName($providerName)
    {
        $this->__load();
        return parent::setProviderName($providerName);
    }

    public function getProviderName()
    {
        $this->__load();
        return parent::getProviderName();
    }

    public function setProviderStatus($providerStatus)
    {
        $this->__load();
        return parent::setProviderStatus($providerStatus);
    }

    public function getProviderStatus()
    {
        $this->__load();
        return parent::getProviderStatus();
    }

    public function setProviderReference($providerReference)
    {
        $this->__load();
        return parent::setProviderReference($providerReference);
    }

    public function getProviderReference()
    {
        $this->__load();
        return parent::getProviderReference();
    }

    public function setProviderMetadata(array $providerMetadata = array (
))
    {
        $this->__load();
        return parent::setProviderMetadata($providerMetadata);
    }

    public function getProviderMetadata()
    {
        $this->__load();
        return parent::getProviderMetadata();
    }

    public function setWidth($width)
    {
        $this->__load();
        return parent::setWidth($width);
    }

    public function getWidth()
    {
        $this->__load();
        return parent::getWidth();
    }

    public function setHeight($height)
    {
        $this->__load();
        return parent::setHeight($height);
    }

    public function getHeight()
    {
        $this->__load();
        return parent::getHeight();
    }

    public function setLength($length)
    {
        $this->__load();
        return parent::setLength($length);
    }

    public function getLength()
    {
        $this->__load();
        return parent::getLength();
    }

    public function setCopyright($copyright)
    {
        $this->__load();
        return parent::setCopyright($copyright);
    }

    public function getCopyright()
    {
        $this->__load();
        return parent::getCopyright();
    }

    public function setAuthorName($authorName)
    {
        $this->__load();
        return parent::setAuthorName($authorName);
    }

    public function getAuthorName()
    {
        $this->__load();
        return parent::getAuthorName();
    }

    public function setContext($context)
    {
        $this->__load();
        return parent::setContext($context);
    }

    public function getContext()
    {
        $this->__load();
        return parent::getContext();
    }

    public function setCdnIsFlushable($cdnIsFlushable)
    {
        $this->__load();
        return parent::setCdnIsFlushable($cdnIsFlushable);
    }

    public function getCdnIsFlushable()
    {
        $this->__load();
        return parent::getCdnIsFlushable();
    }

    public function setCdnFlushAt(\DateTime $cdnFlushAt = NULL)
    {
        $this->__load();
        return parent::setCdnFlushAt($cdnFlushAt);
    }

    public function getCdnFlushAt()
    {
        $this->__load();
        return parent::getCdnFlushAt();
    }

    public function setUpdatedAt(\DateTime $updatedAt = NULL)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }

    public function setCreatedAt(\DateTime $createdAt = NULL)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setContentType($contentType)
    {
        $this->__load();
        return parent::setContentType($contentType);
    }

    public function getContentType()
    {
        $this->__load();
        return parent::getContentType();
    }

    public function getExtension()
    {
        $this->__load();
        return parent::getExtension();
    }

    public function setSize($size)
    {
        $this->__load();
        return parent::setSize($size);
    }

    public function getSize()
    {
        $this->__load();
        return parent::getSize();
    }

    public function getBox()
    {
        $this->__load();
        return parent::getBox();
    }

    public function setGalleryHasMedias($galleryHasMedias)
    {
        $this->__load();
        return parent::setGalleryHasMedias($galleryHasMedias);
    }

    public function getGalleryHasMedias()
    {
        $this->__load();
        return parent::getGalleryHasMedias();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'name', 'description', 'enabled', 'providerName', 'providerStatus', 'providerReference', 'providerMetadata', 'width', 'height', 'length', 'contentType', 'size', 'copyright', 'authorName', 'context', 'cdnIsFlushable', 'cdnFlushAt', 'updatedAt', 'createdAt', 'id', 'galleryHasMedias');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}